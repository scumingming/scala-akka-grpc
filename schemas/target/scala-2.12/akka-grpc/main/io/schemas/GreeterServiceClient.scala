
// Generated by Akka gRPC. DO NOT EDIT.
package io.schemas

import scala.concurrent.ExecutionContext

import akka.actor.ClassicActorSystemProvider

import akka.grpc.GrpcClientSettings

import akka.grpc.scaladsl.AkkaGrpcClient

import akka.grpc.internal.NettyClientUtils
import akka.grpc.internal.ClientState

import akka.grpc.scaladsl.SingleResponseRequestBuilder
import akka.grpc.internal.ScalaUnaryRequestBuilder
import akka.grpc.internal.ScalaClientStreamingRequestBuilder
import akka.grpc.scaladsl.StreamResponseRequestBuilder
import akka.grpc.internal.ScalaServerStreamingRequestBuilder
import akka.grpc.internal.ScalaBidirectionalStreamingRequestBuilder

// Not sealed so users can extend to write their stubs
trait GreeterServiceClient extends GreeterService with GreeterServiceClientPowerApi with AkkaGrpcClient

object GreeterServiceClient {
  def apply(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider): GreeterServiceClient =
    new DefaultGreeterServiceClient(settings)
}

final class DefaultGreeterServiceClient(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider) extends GreeterServiceClient {
  import GreeterService.MethodDescriptors._

  private implicit val ex: ExecutionContext = sys.classicSystem.dispatcher
  private val options = NettyClientUtils.callOptions(settings)
  private val clientState = new ClientState(settings, akka.event.Logging(sys.classicSystem, classOf[DefaultGreeterServiceClient]))

  
  private def sayHelloRequestBuilder(channel: akka.grpc.internal.InternalChannel) =
  
    new ScalaUnaryRequestBuilder(sayHelloDescriptor, channel, options, settings)
  
  
  private def itKeepsTalkingRequestBuilder(channel: akka.grpc.internal.InternalChannel) =
  
    
    new ScalaClientStreamingRequestBuilder(itKeepsTalkingDescriptor, channel, options, settings)
    
  
  
  private def itKeepsReplyingRequestBuilder(channel: akka.grpc.internal.InternalChannel) =
  
    
    new ScalaServerStreamingRequestBuilder(itKeepsReplyingDescriptor, channel, options, settings)
    
  
  
  private def streamHellosRequestBuilder(channel: akka.grpc.internal.InternalChannel) =
  
    
    new ScalaBidirectionalStreamingRequestBuilder(streamHellosDescriptor, channel, options, settings)
    
  
  

  
  /**
   * Lower level "lifted" version of the method, giving access to request metadata etc.
   * prefer sayHello(io.schemas.HelloRequest) if possible.
   */
  
  override def sayHello(): SingleResponseRequestBuilder[io.schemas.HelloRequest, io.schemas.HelloReply] =
    sayHelloRequestBuilder(clientState.internalChannel)
  

  /**
   * For access to method metadata use the parameterless version of sayHello
   */
  def sayHello(in: io.schemas.HelloRequest): scala.concurrent.Future[io.schemas.HelloReply] =
    sayHello().invoke(in)
  
  /**
   * Lower level "lifted" version of the method, giving access to request metadata etc.
   * prefer itKeepsTalking(akka.stream.scaladsl.Source[io.schemas.HelloRequest, akka.NotUsed]) if possible.
   */
  
  override def itKeepsTalking(): SingleResponseRequestBuilder[akka.stream.scaladsl.Source[io.schemas.HelloRequest, akka.NotUsed], io.schemas.HelloReply] =
    itKeepsTalkingRequestBuilder(clientState.internalChannel)
  

  /**
   * For access to method metadata use the parameterless version of itKeepsTalking
   */
  def itKeepsTalking(in: akka.stream.scaladsl.Source[io.schemas.HelloRequest, akka.NotUsed]): scala.concurrent.Future[io.schemas.HelloReply] =
    itKeepsTalking().invoke(in)
  
  /**
   * Lower level "lifted" version of the method, giving access to request metadata etc.
   * prefer itKeepsReplying(io.schemas.HelloRequest) if possible.
   */
  
  override def itKeepsReplying(): StreamResponseRequestBuilder[io.schemas.HelloRequest, io.schemas.HelloReply] =
    itKeepsReplyingRequestBuilder(clientState.internalChannel)
  

  /**
   * For access to method metadata use the parameterless version of itKeepsReplying
   */
  def itKeepsReplying(in: io.schemas.HelloRequest): akka.stream.scaladsl.Source[io.schemas.HelloReply, akka.NotUsed] =
    itKeepsReplying().invoke(in)
  
  /**
   * Lower level "lifted" version of the method, giving access to request metadata etc.
   * prefer streamHellos(akka.stream.scaladsl.Source[io.schemas.HelloRequest, akka.NotUsed]) if possible.
   */
  
  override def streamHellos(): StreamResponseRequestBuilder[akka.stream.scaladsl.Source[io.schemas.HelloRequest, akka.NotUsed], io.schemas.HelloReply] =
    streamHellosRequestBuilder(clientState.internalChannel)
  

  /**
   * For access to method metadata use the parameterless version of streamHellos
   */
  def streamHellos(in: akka.stream.scaladsl.Source[io.schemas.HelloRequest, akka.NotUsed]): akka.stream.scaladsl.Source[io.schemas.HelloReply, akka.NotUsed] =
    streamHellos().invoke(in)
  

  override def close(): scala.concurrent.Future[akka.Done] = clientState.close()
  override def closed: scala.concurrent.Future[akka.Done] = clientState.closed()

}

object DefaultGreeterServiceClient {

  def apply(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider): GreeterServiceClient =
    new DefaultGreeterServiceClient(settings)
}

trait GreeterServiceClientPowerApi {
  
  /**
   * Lower level "lifted" version of the method, giving access to request metadata etc.
   * prefer sayHello(io.schemas.HelloRequest) if possible.
   */
  
  def sayHello(): SingleResponseRequestBuilder[io.schemas.HelloRequest, io.schemas.HelloReply] = ???
  
  
  /**
   * Lower level "lifted" version of the method, giving access to request metadata etc.
   * prefer itKeepsTalking(akka.stream.scaladsl.Source[io.schemas.HelloRequest, akka.NotUsed]) if possible.
   */
  
  def itKeepsTalking(): SingleResponseRequestBuilder[akka.stream.scaladsl.Source[io.schemas.HelloRequest, akka.NotUsed], io.schemas.HelloReply] = ???
  
  
  /**
   * Lower level "lifted" version of the method, giving access to request metadata etc.
   * prefer itKeepsReplying(io.schemas.HelloRequest) if possible.
   */
  
  def itKeepsReplying(): StreamResponseRequestBuilder[io.schemas.HelloRequest, io.schemas.HelloReply] = ???
  
  
  /**
   * Lower level "lifted" version of the method, giving access to request metadata etc.
   * prefer streamHellos(akka.stream.scaladsl.Source[io.schemas.HelloRequest, akka.NotUsed]) if possible.
   */
  
  def streamHellos(): StreamResponseRequestBuilder[akka.stream.scaladsl.Source[io.schemas.HelloRequest, akka.NotUsed], io.schemas.HelloReply] = ???
  
  

}
