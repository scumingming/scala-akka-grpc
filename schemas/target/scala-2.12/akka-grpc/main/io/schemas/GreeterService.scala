
// Generated by Akka gRPC. DO NOT EDIT.
package io.schemas

import akka.annotation.ApiMayChange


trait GreeterService {
  
  
  def sayHello(in: io.schemas.HelloRequest): scala.concurrent.Future[io.schemas.HelloReply]
  
  
  def itKeepsTalking(in: akka.stream.scaladsl.Source[io.schemas.HelloRequest, akka.NotUsed]): scala.concurrent.Future[io.schemas.HelloReply]
  
  
  def itKeepsReplying(in: io.schemas.HelloRequest): akka.stream.scaladsl.Source[io.schemas.HelloReply, akka.NotUsed]
  
  
  def streamHellos(in: akka.stream.scaladsl.Source[io.schemas.HelloRequest, akka.NotUsed]): akka.stream.scaladsl.Source[io.schemas.HelloReply, akka.NotUsed]
  
}



object GreeterService extends akka.grpc.ServiceDescription {
  val name = "GreeterService"

  val descriptor: com.google.protobuf.Descriptors.FileDescriptor =
    io.schemas.GreeterServiceProto.javaDescriptor;

  object Serializers {
    import akka.grpc.scaladsl.ScalapbProtobufSerializer
    
    val HelloRequestSerializer = new ScalapbProtobufSerializer(io.schemas.HelloRequest.messageCompanion)
    
    val HelloReplySerializer = new ScalapbProtobufSerializer(io.schemas.HelloReply.messageCompanion)
    
  }

  @ApiMayChange
  object MethodDescriptors {
    import akka.grpc.internal.Marshaller
    import io.grpc.MethodDescriptor
    import Serializers._

    
    val sayHelloDescriptor: MethodDescriptor[io.schemas.HelloRequest, io.schemas.HelloReply] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("GreeterService", "SayHello"))
        .setRequestMarshaller(new Marshaller(HelloRequestSerializer))
        .setResponseMarshaller(new Marshaller(HelloReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
    
    val itKeepsTalkingDescriptor: MethodDescriptor[io.schemas.HelloRequest, io.schemas.HelloReply] =
      MethodDescriptor.newBuilder()
        .setType(
  
  MethodDescriptor.MethodType.CLIENT_STREAMING 
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("GreeterService", "ItKeepsTalking"))
        .setRequestMarshaller(new Marshaller(HelloRequestSerializer))
        .setResponseMarshaller(new Marshaller(HelloReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
    
    val itKeepsReplyingDescriptor: MethodDescriptor[io.schemas.HelloRequest, io.schemas.HelloReply] =
      MethodDescriptor.newBuilder()
        .setType(
  
  
   MethodDescriptor.MethodType.SERVER_STREAMING 
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("GreeterService", "ItKeepsReplying"))
        .setRequestMarshaller(new Marshaller(HelloRequestSerializer))
        .setResponseMarshaller(new Marshaller(HelloReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
    
    val streamHellosDescriptor: MethodDescriptor[io.schemas.HelloRequest, io.schemas.HelloReply] =
      MethodDescriptor.newBuilder()
        .setType(
  
  
  
  MethodDescriptor.MethodType.BIDI_STREAMING 
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("GreeterService", "streamHellos"))
        .setRequestMarshaller(new Marshaller(HelloRequestSerializer))
        .setResponseMarshaller(new Marshaller(HelloReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
    
  }
}
